#!/bin/bash

#############################################
# Log Cleanup Verification Script
# Purpose: Check what will be deleted/kept before running cleanup
#############################################

# Configuration
BASE_LOG_DIR="/apps/trace/Jour_Du_Mois"
RETENTION_DAYS=60  # 2 months
PROJECT_FOLDERS=("PRO_LIS" "PRO_FVS")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "=============================================="
echo "Log Cleanup Verification Report"
echo "=============================================="
echo "Base directory: ${BASE_LOG_DIR}"
echo "Retention period: ${RETENTION_DAYS} days (2 months)"
echo "Cutoff date: $(date -d "${RETENTION_DAYS} days ago" '+%Y-%m-%d' 2>/dev/null || date -v-${RETENTION_DAYS}d '+%Y-%m-%d' 2>/dev/null)"
echo "Current date: $(date '+%Y-%m-%d')"
echo "=============================================="
echo ""

# Check if base directory exists
if [ ! -d "${BASE_LOG_DIR}" ]; then
    echo -e "${RED}ERROR: Base directory ${BASE_LOG_DIR} does not exist${NC}"
    exit 1
fi

# Function to format bytes
format_size() {
    local size=$1
    if command -v numfmt &> /dev/null; then
        numfmt --to=iec-i --suffix=B $size 2>/dev/null || echo "${size} bytes"
    else
        echo "${size} bytes"
    fi
}

# Initialize counters
total_files_to_delete=0
total_files_to_keep=0
total_size_to_delete=0
total_size_to_keep=0

echo -e "${YELLOW}Scanning directories...${NC}"
echo ""

# Process each project folder
for proj_name in "${PROJECT_FOLDERS[@]}"; do
    echo -e "${BLUE}=== Project: ${proj_name} ===${NC}"
    
    # Count files to be DELETED (older than RETENTION_DAYS)
    files_to_delete=0
    size_to_delete=0
    
    echo -e "${RED}Files to be DELETED (older than ${RETENTION_DAYS} days):${NC}"
    
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            files_to_delete=$((files_to_delete + 1))
            file_size=$(stat -f%z "${file}" 2>/dev/null || stat -c%s "${file}" 2>/dev/null || echo 0)
            size_to_delete=$((size_to_delete + file_size))
            
            # Show first 5 examples
            if [ $files_to_delete -le 5 ]; then
                file_date=$(stat -f%Sm -t "%Y-%m-%d" "${file}" 2>/dev/null || stat -c%y "${file}" 2>/dev/null | cut -d' ' -f1)
                echo "  - $(basename "$file") [Date: ${file_date}, Size: $(format_size $file_size)]"
            fi
        fi
    done < <(find "${BASE_LOG_DIR}/"*"/${proj_name}" -type f -mtime +${RETENTION_DAYS} 2>/dev/null)
    
    if [ $files_to_delete -gt 5 ]; then
        echo "  ... and $((files_to_delete - 5)) more files"
    fi
    
    echo "  Total: ${files_to_delete} files, $(format_size $size_to_delete)"
    echo ""
    
    # Count files to be KEPT (within RETENTION_DAYS)
    files_to_keep=0
    size_to_keep=0
    
    echo -e "${GREEN}Files to be KEPT (within last ${RETENTION_DAYS} days):${NC}"
    
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            files_to_keep=$((files_to_keep + 1))
            file_size=$(stat -f%z "${file}" 2>/dev/null || stat -c%s "${file}" 2>/dev/null || echo 0)
            size_to_keep=$((size_to_keep + file_size))
            
            # Show first 5 examples
            if [ $files_to_keep -le 5 ]; then
                file_date=$(stat -f%Sm -t "%Y-%m-%d" "${file}" 2>/dev/null || stat -c%y "${file}" 2>/dev/null | cut -d' ' -f1)
                echo "  - $(basename "$file") [Date: ${file_date}, Size: $(format_size $file_size)]"
            fi
        fi
    done < <(find "${BASE_LOG_DIR}/"*"/${proj_name}" -type f -mtime -${RETENTION_DAYS} 2>/dev/null)
    
    if [ $files_to_keep -gt 5 ]; then
        echo "  ... and $((files_to_keep - 5)) more files"
    fi
    
    echo "  Total: ${files_to_keep} files, $(format_size $size_to_keep)"
    echo ""
    
    # Add to totals
    total_files_to_delete=$((total_files_to_delete + files_to_delete))
    total_files_to_keep=$((total_files_to_keep + files_to_keep))
    total_size_to_delete=$((total_size_to_delete + size_to_delete))
    total_size_to_keep=$((total_size_to_keep + size_to_keep))
done

# Summary
echo "=============================================="
echo -e "${YELLOW}SUMMARY${NC}"
echo "=============================================="
echo -e "${RED}Files to DELETE:${NC} ${total_files_to_delete}"
echo -e "${RED}Space to FREE:${NC} $(format_size $total_size_to_delete)"
echo ""
echo -e "${GREEN}Files to KEEP:${NC} ${total_files_to_keep}"
echo -e "${GREEN}Space to KEEP:${NC} $(format_size $total_size_to_keep)"
echo "=============================================="
echo ""

# Show directories that will be processed
echo -e "${BLUE}Directories that will be processed:${NC}"
for dir in "${BASE_LOG_DIR}"/*; do
    if [ -d "$dir" ]; then
        dir_name=$(basename "$dir")
        echo "  - ${dir_name}"
    fi
done | head -10
echo ""

# Warning and confirmation
if [ $total_files_to_delete -gt 0 ]; then
    echo -e "${YELLOW}WARNING: ${total_files_to_delete} files will be PERMANENTLY deleted!${NC}"
    echo "Review the above information carefully before running the cleanup script."
else
    echo -e "${GREEN}No files found that are older than ${RETENTION_DAYS} days.${NC}"
    echo "Nothing will be deleted."
fi

echo ""
echo "To proceed with cleanup, run: /usr/local/bin/log_cleanup.sh"
echo "==================================
